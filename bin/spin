#!/usr/bin/env bash

# set -o xtrace

SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
SPIN_HOME=$(dirname "$SCRIPT_DIR") #Assume the parent directory of this script is the home
AUTO_UPDATE_INTERVAL_IN_DAYS=${AUTO_UPDATE_INTERVAL_IN_DAYS:-14}
SPIN_CONFIG_FILE_LOCATION="$SPIN_HOME/conf/spin.conf"

################################################
# ‚öôÔ∏è FUNCTIONS: Common things that are called
################################################

check_for_upgrade() {
  # Perform upgrades when not within update threshold, or if "--force" is passed
  if [ ! is_within_update_threshold ] || [ "$1" == "--force" ] ; then
    send_to_upgrade_script
  else
    # Silence is golden. We won't bug the user if everything looks good.
    :
  fi
}

current_time_minus() {
  # Accepts parameters: The first passed argument should be the number of days to subtract
  # This will return a value of (current epoch time - number of days)

  local days_to_subtract
  days_to_subtract=$1
  
  # Check the OS, because the commands are different.
  case "$(uname -s)" in
    Linux*)     DATE_THRESHOLD=$(date -d "now - ${days_to_subtract} days" +%s);;
    Darwin*)    DATE_THRESHOLD=$(date -v -${days_to_subtract}d +%s);;
    *)          echo "This operating system is not supported." && exit 2
  esac

  echo $DATE_THRESHOLD

}

docker_pull_check() {
  # Check for Internet connection before running a Docker pull
  if is_internet_connected; then

    if [ "$1" == "--no-pull" ]; then
      printf "${BOLD}${YELLOW}‚ùóÔ∏è Skipping automatic docker image pull.${RESET}\n"
      shift 1
      PULL_PROCESSED_COMMANDS="$@"
      return
    fi
    $COMPOSE pull --ignore-pull-failures
    PULL_PROCESSED_COMMANDS="$@"
  else
      printf "${BOLD}${YELLOW}‚ùóÔ∏è Skipping automatic docker image pull.${RESET}\n"
      PULL_PROCESSED_COMMANDS="$@"
  fi

  return
}

is_within_update_threshold() {
  if [ -f $SPIN_HOME/conf/last_update_check.lock ]; then

    CURRENT_EPOCH_SECONDS=$(date +%s)
    if (( $(cat $SPIN_HOME/conf/last_update_check.lock) <= $(current_time_minus $AUTO_UPDATE_INTERVAL_IN_DAYS) )); then
      return 1
    else
      return 0
    fi

  else
    return 1
  fi
}

is_installed_to_user() {
  if [ -f "$SPIN_HOME/conf/spin.conf" ]; then
    return 0
  else
    return 1
  fi
}

is_internet_connected() {
  local response
  response=$(curl https://github.com/serversideup/spin/ --write-out %{http_code} --silent --output /dev/null --max-time 1)

  if [ $response -eq 200 ]; then
    return 0
  else
    printf "${BOLD}${YELLOW}\"spin\" tried to check for updates, but we couldn't connect to Github.com. We'll try again tomorrow.${RESET} \n"
    # Take the current time and subtract just one day short of the auto update interval so we check again tomorrow
    echo $(current_time_minus $(expr $AUTO_UPDATE_INTERVAL_IN_DAYS - 1)) > $SPIN_HOME/conf/last_update_check.lock
    return 1
  fi
}

print_version() {

  # Use the local Git repo to show our version
  printf "${BOLD}${YELLOW}Spin Version:${RESET} \n"
  printf "$(git -C $SPIN_HOME describe --tags) "
  
  # Show the track (if installed to the user)
  if is_installed_to_user; then
    source $SPIN_CONFIG_FILE_LOCATION
    printf "[$TRACK] "
    printf "(User Installed)\n"
  else
    printf "(Project Installed)\n"
  fi
}

send_to_upgrade_script () {
  if is_internet_connected; then
    source $SPIN_HOME/tools/upgrade.sh
  fi
}

setup_color() {
    RAINBOW="
      $(printf '\033[38;5;196m')
      $(printf '\033[38;5;202m')
      $(printf '\033[38;5;226m')
      $(printf '\033[38;5;082m')
    "
    RED=$(printf '\033[31m')
    GREEN=$(printf '\033[32m')
    YELLOW=$(printf '\033[33m')
    BLUE=$(printf '\033[34m')
    BOLD=$(printf '\033[1m')
    RESET=$(printf '\033[m')
}

################################################
# üèé ACTIONS: Commands people can run
################################################
action_build() {
  shift 1

  # Build the containers with `docker-compose`
  $COMPOSE build "$@"
}

action_debug(){
  
  print_version

  # Show operating system version
  printf "\n${BOLD}${YELLOW}Operating System Version:${RESET} \n"
  case "$(uname -s)" in
      Linux*)     cat /etc/os-release;;
      Darwin*)    sw_vers;;
      *)          echo "This operating system is not supported." && exit 2
  esac
  printf "\n"
  
  # Show docker version
  printf "${BOLD}${BLUE}Docker Info:${RESET} \n"
  printf "$(docker info)\n"
  
}

action_down() {
  shift 1

  # Bring down the containers with `docker-compose`
  $COMPOSE down --remove-orphans "$@"
}

action_exec(){
  shift 1

  $COMPOSE exec $@ 
}

action_help(){
  echo "Help coming soon..." 
}

action_kill(){
  read -p "üö® You're about to kill all running containers. Are you sure you want to do this? (Y) " -n 1 -r
  echo    # Move to a new line

  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo "Cancelling... Nothing with Docker was touched üòÖ"
      exit 1
  fi

  echo "Stopping containers..."
  docker stop $(docker ps -q)
}

action_logs(){
  shift 1

  $COMPOSE logs "$@"
}

action_new(){
  shift 1

  # Check that an argument is passed
    if [ $# -gt 0 ]; then
      # Check the first argument and pass the user to proper action, Only some actions need arguments passed.
      case $1 in
        laravel)
          shift 1
          docker run --rm -v $(pwd):/var/www/html -e "S6_LOGGING=1" serversideup/php:8.1-cli composer create-project laravel/laravel "$@"
        ;;
        *)
          echo "\"$1\" is not a valid command. Below are the commands available."
          action_help
        ;;
      esac
    else
      printf "${BOLD}${YELLOW}\ü§î You didn't pass \"spin new\" any arguments. Run \"spin help\" if you want to see the documentation.${RESET}"
    fi

  }

action_run(){
  shift 1

  docker_pull_check "$@"

  # Run Docker Compose without dependencies. Ensure automations and S6 logging are disabled
    $COMPOSE run --no-deps --rm \
      -e "AUTORUN_ENABLED=false" \
      -e "S6_LOGGING=1" \
      $PULL_PROCESSED_COMMANDS

}

action_up() {
  shift 1

  docker_pull_check "$@"
  $COMPOSE up --remove-orphans $PULL_PROCESSED_COMMANDS
}

action_update() {
  if is_installed_to_user; then

    if is_internet_connected; then
      check_for_upgrade --force
    fi

  else
    printf "${BOLD}${YELLOW}‚ö†Ô∏è Cannot automatically perform an update.${RESET} "
    printf "Your using \"spin\" from the project level. Install updates via NPM or Composer instead.\n"
    exit 1
  fi
}

action_version() {
  print_version
}

################################################
# üöÄ MAIN part of "spin"
################################################
main() {
  ## Set defaults for our environment

  # Select environment to be used, 
  # Allows passing as `ENV` environment variable,
  # or defaults to `dev`
  SPIN_ENV=${SPIN_ENV:-dev}

  # Export the compose file(s) to be used
  # Allows overriding with standard `COMPOSE_FILE` environment variable
  # or defaults to building compound from base and environment files
  export COMPOSE_FILE=${COMPOSE_FILE:-"docker-compose.yml:docker-compose.$SPIN_ENV.yml"}

  # Set up our structure for our re-used commands
  COMPOSE="docker compose"
 
  # Check that an argument is passed
  if [ $# -gt 0 ]; then
    # Check the first argument and pass the user to proper action, Only some actions need arguments passed.
    case $1 in
      build)
        action_build "$@"
      ;;
      debug)
        action_debug "$@"
      ;;
      down)
        action_down "$@"
      ;;
      exec)
        action_exec "$@"
      ;;
      help)
        action_help
      ;;
      kill)
        action_kill
      ;;
      logs)
        action_logs "$@"
      ;;
      new)
        action_new "$@"
      ;;
      run)
        action_run "$@"
      ;;
      up)
        action_up "$@"
      ;;
      update)
        action_update
      ;;
      version)
        action_version
      ;;
      *)
        echo "\"$1\" is not a valid command. Below are the commands available."
        action_help
      ;;
    esac
  else
    printf "${BOLD}${YELLOW}\ü§î You didn't pass \"spin\" any arguments. Run \"spin help\" if you want to see the documentation.${RESET}"
  fi
}

################################################
# Where the script actually starts
################################################

setup_color
if is_installed_to_user; then
  # Prevent "spin update" from running updates twice
  if [ "$1" != "update" ]; then
    check_for_upgrade
  fi
fi

# Check that Docker is running
if ! docker info > /dev/null 2>&1; then
  printf "${BOLD}${RED}‚ùå Docker is not running.${RESET} "
  printf "You need to start Docker Desktop or install it before using \"spin\".\n"
  exit 1
fi

main "$@" #Passing the original arguments to `main`